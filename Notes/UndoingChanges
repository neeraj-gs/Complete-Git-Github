UNDOING CHANGES AND TIME TRAVELLING

We do not ahve to use it daily as it is not that important compared to other git commands


Checking out old commits
git checkout commitHash
	
Detached head - if in this state we can make cha ges and commit and discard any commits w/o impacting other bracnhces or workflow

//when we want ot see some older or how our project was earlier 
git checkout CommitHash
	we get a detached head state when we see older commits
		and we see only commits earlier and newer commits are not seen
	git status -- we get HEASD DETACHED STATE

we have not lost any of the cahnges


head points to tthe specific bracnh reference
	Bracnh reference points to ost recent commit
	WWhne we switch branches head is moved to new reference
		Head is not pointing to a commit and it poinys to the reference and this reference in turn points ot a commit

Detached Head -- we when the reference and head are pointing at diffrent places
cat .git/HEAD

//NOW WE HAVE JUST GONE TO A DETACHED STATEE AND THE PLACE WHERE WE CAN SEE THE OLDER ONES AND NOT THE NEW ONES


REATTACHING OUR DETACHED HEAD
just switch to the main branch and we are reattached
after switching we can see all the commits we ahd lost


NOW REBRANCHIGN FROM OLD COMMIT
Jead will now be atached to new branch and detached head is re-attached	

Making changes in a seperate branches and commits it then a new branch flow is seen 
	ONly earlier commits are present adn then the later changes we do only these logs are present



REFEREENCING COMMITS RELATIVE TO HEAD

We can reference commits based upon head
git checkout HEAD~1 == refers to comit before head [head -1]
~2 -- what comes before head-2 and so on

	we will still go to a detached hea only simialr using commit hash but instead of that we will use a HEAD~n -- head -n th commit

git switch - //takes to the bracnh where we were earlier


DISCARDING CHANGES
	we can revert back to where we previouly commited

	git checkout HEAD <file1> <file2>
	IF we dont want to commit that we have to manually delete taht 
	or else we can use git checkout head

	HEAD POINTS AT LAST COMMIT
	git checkout -- <file>
	WE WILL BE BACK TO WHERE HEAD IS
	

UNMODIFYINH WITH GIT RESTORE
IT IS A NEW COMMAND IN GIT TAHT HELPS WITH UNDOING CHANGES

git restore <file>
	discard cahnges we have made in a repo since the last commit 	
UNtracked files are lost and sees how it was at head and changes are lost

	Same as gi checkout HEAD file

reference a particular commit and go back
how it looked earlier
git restore --source commitHash file

	all unstagegd changes are gone if it is not commited .
it does not move us we are still having all commits it is jsut for viewig 
	git restore file -- takes us to the last commit


UNSTAGING CHANGES WITH GIT RESTORE
To unstage files we staged
	say we do not want that file to be commited so we can use the command and undo the staged cahnges 

	git restore --staged <file-name>
Say we did not want to add a file to a commit or to remove it
	So we use git restore --staged file
		the file is unstageed and the other fiels are staged and is ready for commit

restore has UNMODIFY ANF UNSTAGED

GIT STTAUS REMINds us the commit what we have to use


UNDOING COMMITS WITH GIT RESET
it will reset a repo back to some commiting stage
git reset commitHash

all the commits are unchanged and done
git log --oneline
	Say we need to got ot old commit use hash and git rest and all the cahnges are still there are not gone

		it just removed the commits and not the cahnges 
			Changes are still in working directry

	After the commithash any later commtis are not seen by the git repo
		we dont loose that cahnges we loose the cmomits

we can create a new brancha nd then commit those mistakes 
	now seitch to main and all the cahnges are gone


git reset --hard CommitHash
	It undoes the commits and also the cahgnes are also removed by it
and we go back to how the repo was in that commit hash



git revert
undping changes from a commit

reset removes commits entirely and moves branch pointer backwards
revert is simialr ot  reset ceates a new commit which says it is undoing changes instead of removing commits

git revert commitHash
	chagnes from that commit ahsh is gone
we will keep the history but we undo the changes in it
	History of commits are not lost but we have to jsut increase it

Which one to use?
	reset is difficutl as all the commit history islost

	revert the changes are aslo present we can change it later

revert is better as w can go rverse with having all teh cchagnes and the commits in it














